name: Builds

on:
  push:
  pull_request:
    branches:
      - main
      - 'release/**'

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  linux:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/${{ matrix.image }}:v11
    strategy:
      matrix:
        image:
          - centos7-lcg97apython3-gcc9
          - centos7-lcg98python3-gcc10
          - ubuntu2004
    env:
      SETUP: true
      SETUP_LCG: source /opt/lcg_view/setup.sh
      INSTALL_DIR: ${{ github.workspace }}/install
    steps:
      - uses: actions/checkout@v2
      - name: Define setup script
        if: contains(matrix.image, 'lcg')
        run: echo "SETUP=${SETUP_LCG}" >> $GITHUB_ENV
      - name: Configure
        run: >
          ${SETUP} &&
          cmake -B build -S .
          -GNinja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
          -DACTS_BUILD_EVERYTHING=on
          -DACTS_LOG_FAILURE_THRESHOLD=WARNING
      - name: Build
        run: ${SETUP} && cmake --build build -- 
      - name: Unit tests
        run: ${SETUP} && cmake --build build -- test
      - name: Integration tests
        run: ${SETUP} && cmake --build build -- integrationtests
      - name: Examples
        if: contains(matrix.image, 'ubuntu')
        run: ${SETUP} && ./CI/run_examples.sh
      - name: Install
        run: ${SETUP} && cmake --build build -- install
      - uses: actions/upload-artifact@v2
        with:
          name: acts-${{ matrix.image }}
          path: ${{ env.INSTALL_DIR }}
      - name: Downstream configure
        run: >
          ${SETUP} &&
          cmake -B build-downstream -S Tests/DownstreamProject
          -GNinja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_PREFIX_PATH="${INSTALL_DIR}"
      - name: Downstream build
        run: ${SETUP} && cmake --build build-downstream --
      - name: Downstream run
        run: ${SETUP} && ./build-downstream/bin/ShowActsVersion
  cuda:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu1804_cuda:v9
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: >
          cmake -B build -S .
          -GNinja
          -DCMAKE_CXX_COMPILER=/usr/bin/g++-8
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DACTS_BUILD_PLUGIN_CUDA=ON
          -DACTS_BUILD_UNITTESTS=ON
      - name: Build
        run: cmake --build build --
  sycl:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004_oneapi:v9
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: >
          source /opt/intel/oneapi/setvars.sh
          && cmake -B build -S .
          -GNinja
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DACTS_BUILD_PLUGIN_SYCL=ON
          -DACTS_BUILD_UNITTESTS=ON
      - name: Build
        run: >
          source /opt/intel/oneapi/setvars.sh
          && cmake --build build --
  docs:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v9
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: >
          apt-get install -y doxygen
          && pip3 install --upgrade pip
          && pip install -r docs/requirements.txt
      - name: Configure
        run: cmake -B build -S . -GNinja -DACTS_BUILD_DOCS=on
      - name: Build
        run: cmake --build build -- docs-with-api
      - uses: actions/upload-artifact@v2
        with:
          name: acts-docs
          path: docs/_build/html/
