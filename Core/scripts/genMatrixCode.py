#!/usr/bin/env python3

import sympy as sp
from sympy.utilities.codegen import codegen
import textwrap

multiplications = [
    ((8, 1), (1, 8)),
    ((6, 8), (8, 8)),
    ((8, 8), (8, 8)),
    ((8, 8), (8, 6)),
    ((6, 8), (8, 6)),
    ((6, 6), (6, 6)),
]


def render_matrix(M):
    return f"ActsMatrix<{M.shape[0]}, {M.shape[1]}>"


def extract_body(expression):
    raw = codegen(("D", expression), language="C")[0][1]
    raw = raw.replace("D_result", "pOut")
    raw = "\n".join(raw.split("\n")[13:-4])
    body = textwrap.dedent(raw)
    return body


header = "// This function is AUTOGENERATED. Do not edit! //"
line = "/" * len(header)
header = line + "\n" + header + "\n" + line

for a, b in multiplications:
    A = sp.MatrixSymbol("pA", *a)
    B = sp.MatrixSymbol("pB", *b)

    C = A * B

    body = extract_body(C)

    body = (
        f"{render_matrix(C)} out;\ndouble* pOut = out.data();\n\n"
        + "const double* pA = A.data();\n"
        + "const double* pB = B.data();\n"
        + "\n"
        + body
        + "\n\nreturn out;"
    )

    signature = f"inline {render_matrix(C)} multiply(const {render_matrix(A)}& A, const {render_matrix(B)}& B)"
    body = "\n".join(
        [header, signature + " {", textwrap.indent(body, prefix=" " * 2), "}"]
    )

    print(body)
    print()

A = sp.MatrixSymbol("pA", 6, 6)
body = extract_body(A.T)
body = (
    f"{render_matrix(A)} out;\n"
    + "double* pOut = out.data();"
    + "\n\n"
    + "const double* pA = A.data();\n\n"
    + body
    + "\n\nreturn out;"
)
signature = f"inline {render_matrix(A)} transpose(const {render_matrix(A)}& A)"
body = "\n".join([header, signature + " {", textwrap.indent(body, prefix=" " * 2), "}"])
print(body)
