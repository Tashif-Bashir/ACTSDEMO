// This file is part of the Acts project.
//
// Copyright (C) 2020 CERN for the benefit of the Acts project
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#pragma once

#include "ActsFatras/EventData/Hit.hpp"
#include "ActsFatras/EventData/Particle.hpp"

#include <iosfwd>
#include <limits>
#include <vector>

namespace ActsFatras {

/// Particle simulation status.
enum class SimulationParticleStatus {
  /// Particle is alive and can be simulated further.
  eAlive,
  /// Particle has been killed by an interaction.
  eInteracted,
  /// Particle has decayed.
  eDecayed,
};

std::ostream& operator<<(std::ostream& os, SimulationParticleStatus status);

/// Single particle simulation result (and intermediate state).
///
/// This result struct is used by multiple components and thus defined
/// separately.
struct SimulationResult {
  /// Current/ final particle state.
  Particle particle;
  /// Status flag, e.g. if the particle is alive and can be simulated further
  SimulationParticleStatus particleStatus = SimulationParticleStatus::eAlive;
  /// Accumulated particle proper time since the start of the simulation.
  ///
  /// Initialized to NaN so the propagator plugin can detect when it is called
  /// for the first time, i.e. when the result struct is default-initialized.
  Particle::Scalar properTime =
      std::numeric_limits<Particle::Scalar>::quiet_NaN();
  /// Material accumulated during the propagation.
  /// The initial particle can already have some accumulated material. The
  /// particle stores the full material path. This keeps track of the
  /// additional material accumulated during simulation.
  Particle::Scalar pathInX0 = 0;
  Particle::Scalar pathInL0 = 0;
  /// Additional particles generated by interactions.
  std::vector<Particle> generatedParticles;
  /// Hits created by the particle.
  std::vector<Hit> hits;
};

}  // namespace ActsFatras
