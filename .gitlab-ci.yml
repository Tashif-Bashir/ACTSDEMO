variables:
  CCACHE_DIR: ${CI_PROJECT_DIR}/ccache
  CCACHE_MAXSIZE: 2G
  CCACHE_KEY_SUFFIX: r1

clang_tidy:
  stage: build
  image: ghcr.io/acts-project/ubuntu2004:v41
  artifacts:
    paths:
      - src/clang-tidy/
    when: always
    expire_in: 2 weeks
  script:
    - git clone $CLONE_URL src 
    - cd src
    - git checkout $HEAD_SHA
    - >
        apt-get update
        && apt-get install -y g++-8 libstdc++-8-dev parallel software-properties-common 
        && curl -L https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add
        && add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-16 main'
        && apt-get install -y clang-16 clang-tidy-16
        && ln -s /usr/bin/clang++-16 /usr/bin/clang++
        && ln -s /usr/bin/clang-16 /usr/bin/clang
        && ln -s /usr/bin/clang-tidy-16 /usr/bin/clang-tidy
        && mkdir -p /opt/lib/gcc/x86_64-linux-gnu
        && ln -s /usr/lib/gcc/x86_64-linux-gnu/8/ /opt/lib/gcc/x86_64-linux-gnu/ 
        && clang++ --gcc-toolchain=/opt -v
    - >
        cmake -B build -S .
        -GNinja
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_CXX_FLAGS="-Werror --gcc-toolchain=/opt"
        -DACTS_BUILD_EVERYTHING=on
        -DACTS_RUN_CLANG_TIDY=on

    # Main clang-tidy run during cmake compilation
    - CI/clang_tidy/run_clang_tidy.sh clang-tidy build -j2

    # Install dependencies for processing scripts
    - pip install -r CI/clang_tidy/requirements.txt

    # Parse the main clang-tidy run
    - >
        CI/clang_tidy/parse_clang_tidy.py 
        clang-tidy/clang-tidy.log 
        clang-tidy/clang-tidy.json 
        --exclude "*thirdparty*"

    # Check the combined report against the defined limits
    - CI/clang_tidy/check_clang_tidy.py --report clang-tidy/clang-tidy.json --config CI/clang_tidy/limits.yml

    # Generate an html report
    - codereport clang-tidy/clang-tidy.json clang-tidy/html
